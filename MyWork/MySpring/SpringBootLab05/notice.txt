- @JoinColumn의 주요 속성

name	: 	FK 컬럼명 (DB에 실제로 저장되는 컬럼명)
referenced :  	FK가 참조할 대상 테이블의 컬럼명
unique	 :	FK 컬럼에 유니크 제약조건 추가
nullable	:	FK 컬럼의 NULL 허용 여부
insertable	:	INSERT SQL문 생성 시 FK 컬럼을 포함할지 여부
updatable	:	UPDATE SQL문 생성 시 FK 컬럼을 포함할지 여부
columnDefinition	:	DDL 생성 시 FK 컬럼의 정의를 직접 작성 (varchar(255) 등)
table	:	FK 컬럼이 다른 테이블에 있는 경우에만 지정 (거의 사용하지 않음)

@Entity
public class Emp {

    @Id
    private int empno;
    private String ename;

    @ManyToOne
    @JoinColumn(
        name = "deptno",                   // FK 컬럼명
        referencedColumnName = "deptno",   // 참조하는 Dept 엔티티의 PK 컬럼명
        nullable = false,                  // NOT NULL
        unique = false,                    // 유니크하지 않음
        insertable = true,                 // INSERT문에 포함
        updatable = true,                  // UPDATE문에 포함
        columnDefinition = "BIGINT(10)"    // FK 컬럼 DDL 정의
    )
    private Dept dept;
}


Emp,Dept
ex1) Fk로 컬럼명을 지정하고 referencecolumnName 개별 속성으로 지정 하자 
  @JoinColumn(name = "deptno", referencedColumnName = "deptno")
ex02) FK 컬럼에서 not Null을 지정 
 @JoinColumn(name = "deptno", nullable = false,)
 
ex03) 1:1 관계에서 Fk를 유니크로 지정 해보자 
 @JoinColumn(name = "deptno", unique =true)
ex04) Fk를 읽기 전용으로 사용 
 insertable = false,                 // INSERT문에 포함
        updatable = false,  
ex05) DDL 생성시 FK 칼럼의 타입 깅ㄹ이를 지정해보자 BIGINT (10)

columnDefinition = "BIGINT(10)" 


=============================================

1) N:1 = ManyToOne : 여러 사원이 하나의 부서에 소속 
	여러 EMP가 하나의 DEPT를 가진다 
	
class Emp{
	   @ManyToOne
    @JoinColumn(
        name = "deptno",                   // FK 컬럼명
        referencedColumnName = "deptno",   // 참조하는 Dept 엔티티의 PK 컬럼명
        nullable = false,                  // NOT NULL
        unique = false,                    // 유니크하지 않음
        insertable = true,                 // INSERT문에 포함
        updatable = true,                  // UPDATE문에 포함
        columnDefinition = "BIGINT(10)"    // FK 컬럼 DDL 정의
    )
    private Dept dept;
}
}



2) 1:N 부서 하나의 여러명의 Emp

class dept{
	@OneToMany(mappedBy = "dept") mappedBy: FK 컬럼은 반대쪽 엔티티 (EMP)에만 존재하고 Dept 테이블에는 FK 컬럼 없음 
	private List<Emp> emps;
}


==========================================================================================

1:1 예제  사원 하나의 사원 정보 하나  (@OntToOne)
class Emp{
@OneToOne
@JoinColumn(
	name = "emp_info_id",  // FK 컬러명 
	referencedColumnName = "id", // EmpInfo의 pk 컬럼
	nullable = flase , //NOT Null

)
private EmpInfo empInfo;

}


class EmpInfo{

1:1 양방향 

@OneToOne(MappedBy = "empInfo")
private Emp emp; 


}


3) n:m @ManyToMany 학생과 강의 관계 -> 학생의 여러개의 강의를 듣고, 강의는 여러학생이 듣는다 
class Student{
@ManyToMany
@joinTable(

	name = "student_cours", // 중간 테이블 
	joinColumns = @JoinColumn("student_id"),// Student Fk
	inverseJoinColumns = @JoinColumn("course_id")// Course Fk
)
private List<Course> couese;

}


class course {
	@Id
	private int course_id; 
	
	ManyToMany(mappedBy="courses")
	private List<Student> Studnent;
}



====================================================================

<< 관계 정리>> 
			주 테이블에는 FK 컬럼이 존재 하고 중간 테이블이 필요하지 않다 
N : 1 ->  @Many(주)ToOne(대상) 
			주테이블에는 FK 컬럼이 존재하지 않고 중간 테이블이 필요하지 않다 (mappedBy를 걸어줘야 한다 )
1 : N ->  @One(주)ToMany(대상) 
			주테이블에는 FK 컬럼이 존재하지 않아도 되고 중간 테이블이 필요하지 않다 (mappedBy를 걸어줘야 한다 )
1:1 -> @OneToOne + @JoinColumn/mappedBy 
			주테이블의 fk 컬럼이 존재하지 않고 중간 테이블이 필요하다 
n : M -> @ManyToMany + @JoinTable 


exam) 1:N (Dept-Emp) : N쪽 (Emp) FK @JoinColumn
	  1:1 -> FK를 한쪽 테이블에 만들고 , 반대쪽은 mappedBy 
	  N:M -> 반드시 중간 테이블 @JoinTable 생성 
	  
	  
	  
=========================================================================
@NoRepositoryBean(인터페이스를 직접 빈으로 등록하지 않겠다, 이걸 설정하지 않으면 자동으로 조합하기 때문) -> http://docs.spring.io/spring-data/jpa/reference/repositories/definition.html
:선조 인터페이스가 가진 공통 메소드만 정의 
: 빈으로 만들지 않고 , 코드를 재사용하고 싶을 때


ex) 
interface MyBaseRepository<T, ID> extends Repository<T, ID> {
		// 공통 메소드를 커스텀 화 했따 
  Optional<T> findById(ID id); // NullPointException 방지 

  <S extends T> S save(S entity); //  T 타입의 하위 타입을 저장할 수 있다 

interface UserRepository extends MyBaseRepository<User, Long> {
  User findByEmailAddress(EmailAddress emailAddress);
  // 나머지 메소드를 내것 처럼 호출 
}

================================================
Persisting Entities : 엔티티를 계속 유지하겠다. 자바객체의 엔티티 상태를 데이터 베이스에 저장하는 것 
EntityManager : 어플레케이션과 DB의 중간에 있으면서 Entity관리 ,cash관리 , DB에 직접 저장하는 역할을 한다. 

@Transient:  관리 받지 않겠다 
@PostPersist : 계속 메모리에 가지고 있다고 DB 저장 하겠다
	=> 사용하는 방법 EntityManger.persist(emp) -> EntityManager.find() or JPA`s CRUD 메소드로 작업 
	-> flush or commit 시 데이터베이스에 동기화  ==== 눈에보이지 않는 작업이지만 콘솔로 내부적으로 돌아가고 있다. 
	
=========================================================================================

case 1: 메소드 매개변수를 사용하는 방법 
@Query("select u from User u where u.firstname = ?1 (포지션 위치로 참조) and u.firstname=?#{[0]}(매개인자의 인덱스 값으로 참조) and u.emailAddress = ?#{principal.emailAddress}")
List<User> findByFirstnameAndCurrentUserWithCustomQuery(String firstname);

case 2 : 메소드 파라미터를 사용하는 방법 
@Query("select u from User u where u.lastname like %:#{[0]}% and u.lastname like %:lastname%")
List<User> findByLastnameWithSpelExpression(@Param("lastname") String lastname);
 
case 3 : 메소드 매개변수를 사용하는 방법 SpEL -> 첫번 째 파라미터를 SQL 와일드 카드를 이스케이프로 처리하겠다  
 @Query("select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}")
List<User> findContainingEscaped(String namePart);

https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html
	 
SpEL(Spring Expession Language) 12 ,18, 19 ,20 -> #{...} 동적으로 쿼리의 파라미터나 컨텍스트 값을 지정한다 


================================================================================================

@Modifying -> update , insert , delete 
@Query("update User u set u.firstname = ?1 where u.lastname = ?2")
int setFixedFirstnameFor(String firstname, String lastname);

@Modifying
@Query("update User u set u.firstname = #{0} where u.lastname = #{1}")
int setFixedFirstnameFor(String firstname, String lastname);

================================================================================================
public interface UserRepository extends Repository<User, Long> {
// 하이버 네이트에 힌트를 주는 것 (캐쉬를 쓸건지 쓰지 않을 건지 ) read_only모드를 쓸 때 같이 사용 
  @QueryHints(value = { @QueryHint(name = "name", value = "value")}, -> value = true 하게 되면 조회결과가 readonly가 된다.
              forCounting = false)-> count 쿼리 사용하지 않겠다 
  Page<User> findByLastname(String lastname, Pageable pageable); 
}

https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/QueryHints.html