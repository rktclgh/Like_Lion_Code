3/4

1.static return 메서드를 작성하고 호출하는 방법을 학습한다
2. object 클래스의 주요 메서드와 역할을 이해하고 활욜할 수 있다.
3. 주소 객체를 생성하고, 이를 활용하여 non-static 멤버를 다룰 수 있다.
4. 박싱(boxing)과 언박싱(unboxing) 그리고 캐스팅(casting)의 개념을 이해하고 적절히 적용할 수 있다.


3/5

1. 연산자의 종류와 역할을 이해하고,  자바의 제어문(비교문, 선택문, 반복문)의 기본 개념을 익힌다.

2. 연산자의 우선순위(Precedence)와 결합 방향(Associativity)을 이해하여 연산이 수행되는 순서를 예측할 수 있다.

3. 다양한 연산자를 조합하여 복잡한 연산식(Expression)을 구성하는 방법을 숙지하고 활용할 수 있다.

4. 비교문, 선택, 반복문 등의 제어문을 활용하여 자바 프로그램의 흐름을 제어할 수 있다. 


3/5
1. 클래스 선언과 생성자 오버로딩의 개념을 이해하고, 다양한 매개변수를 받는 생성자를 구현할 수 있다.
2. 클래스 내부에서 여러 개의 생성자를 정의하고, 인자의 개수나 타입이 다를 때 적절한 생성자를 호출하는 방법을 학습한다.
3. 캡슐화(Encapsulation)의 개념과 필요성을 이해하고, 정보 은닉을 통해 데이터 보호 방법을 설명할 수 있다
- private 접근 제어자를 사용하여 클래스의 멤버 변수를 외부에서 직접 접근하지 못하도록 설정하고, 이를 통해 데이터 무결성을 유지하는 방법
4. Getter와 Setter 메서드를 활용하여 캡슐화된 필드에 안전하게 접근하고 수정할 수 있다.
5. 메서드 오버로딩(Method Overloading)의 개념을 이해하고, 다양한 매개변수를 가진 메서드를 정의할 수 있다
6. 메서드 오버라이딩(Method overriding)을 활용하여 부모 클래스의 메서드를 재정의하고, 다형성을 구현할 수 있다.


3/6

1. 연산자의 종류와 역할을 이해하고, 자바의 제어문(비교문, 선택문, 반복문)의 기본 개념을 익힌다. _ ver. jdk21
2. 연산자의 우선순위(Precedence)와 결합 방향(Associativity)을 이해하여 연산이 수행되는 순서를 예측할 수 있다
3. 다양한 연산자를 조합하여 복잡한 연산식(Expression)을 구성하는 방법을 숙지하고 활용할 수 있다.
4. 비교문, 선택, 반복문 등의 제어문을 활용하여 자바 프로그램의 흐름을 제어할 수 있다.


3/10

day 09
1. 자바의 배열 구조를 통해 참조형 자료들을 처리하는 것을 확인 하고 활용할 수 있다.[기본 문법]

2. 일차원, 다차원, 객체 배열등을 통해 데이터를 프로세싱할 수 있다. java.util.Arrays

3. record 개념과 클래스 구현 방법을 이해하고 클래스 기능을 추가할 수 있다.

4. 상속의 개념과 오버라이딩, 오버로딩을 활용해서 기능 구현, 선언, 활용을 자유롭게 할 수 있다.

Day10 3월 11일
1. 상속(Inheritance)의 개념과 활용을 이해하고, 부모 클래스의 기능을 재사용하여 코드의 중복을 줄일 수 있다.
2. 추상 클래스(Abstract Class)의 개념을 이해하고, 공통 기능을 정의하여 코드의 일관성을 유지할 수 있다.
3. 다형성(Polymorphism)을 활용하여 객체를 동적으로 관리하고, 유연한 코드 구조를 만들 수 있다.
    :  하나의 부모타입을 통해 여러 자식 객체를 참조할 수 있도록 하는 개념
    : 메소드를 오버라이딩 해서 실행 시점에서 객체의 실제 타입에 따라 적절한 메소드가 실행되도록 한다. [동적바인딩]

4. 인터페이스(Interface)를 사용하여 유연한 설계를 구현하고, 다중 구현을 활용할 수 있다.
    필드가 public static final 자동적용, 모든 메소드가 public abstract (jdk8 default, static 메소드 지원)
    -클래스 또는 모듈가느이 연결정도(의존성)을 결합도라고 한다.
    - 결합도가 높다 => 하나의 클래스가 다른 클래스에게 강하게 의존한다.
    -결합도가 낮다 -> 클래스 간의 변경이 있어도 다른 클래스에게 영향이 적다


Day11 3월 12일
1. 클래스와 상속을 활용하여 코드 재사용성을 높이고, 다형성을 적용하여 유연한 프로그램 구조를 설계할 수 있다.
2. 추상 클래스와 인터페이스의 개념과 차이를 이해하고, 각각의 용도와 특징을 설명할 수 있다.
프로그램 실행 중 발생하는 예외를 try-catch-finally 블록을 활용하여 효과적으로 관리할 수 있다.


Day12 3월 13일
1. 문자열 처리와 관련된 String, StringBuilder, StringBuffer 클래스의 특징과 차이점을 이해하고, 각 클래스의 적절한 문자열 조작을 수행할 수 있다.
2. 어노테이션(Annotation)의 목적과 기본 사용법을 이해하고, 커스텀 어노테이션을 정의하여 코드에 메타데이터를 추가하고 활용할 수 있다.
3. 제네릭(Generic)의 개념과 사용법을 이해하고, 타입 안정성을 보장하면서 재사용 가능한 코드를 작성할 수 있으며, 와일드카드와 타입 제한을 활용하여 유연한 제네릭 프로그래밍을 구현할 수 있다.
4. 컬렉션 프레임워크의 구조와 주요 인터페이스(List, Set, Map)를 이해하고 설명할 수 있다.


Day13 3월 14일==
1.자바의 유틸 패키지(java.uti)를 활용하여 다양한 컬렉션 프레임워크와 유틸리티 기능을 효과적으로 사용할 수 있다.
2.람다식을 이해하고 이를 활용하여 코드의 간결성과 가독성을 높이며 함수형 프로그래밍을 구현할 수 있다.
3. 자바의 comparator와 Comparable 인터페이스를 활용하여 사용자 정의 객체의 정렬 로직을 구현할 수 있다.
    comparator -> 객체 외부에서 정렬 기준
    comparable -> 객체 내부에서 정렬 기준
4. Optional 클래스를 활용하여 NullPointerException을 방지하고 안전한 값 처리를 할 수 있다.
    Optioanl <T> -> null값이 발생할 가능성이 있는 상황에서 안전하게 처리하도록 메소드를 제공

5. 다양한 연산(map, filter, sorted, reduce, collect 등)을 활용하여 데이터를 효과적으로 처리할 수 있다.
    익명 클래스: 한번만 사용할 클래스를 정의할 떄 (기능 추가 가능) ->GUI, 이벤트 구현
     람다식: 함수형 인터페이스를 간단하게 구현할 때 (불필요 코드 제거)


-Day 14 3월 17일====

1. 스트림 API를 활용하여 데이터를 효율적으로 변환, 필터링, 집계 및 병렬 처리를 할 수 있으며, 성능을 최적화할 수 있다.
2.스트림의 중간 연산(Intermediate Operations)과 최종 연산(Terminal Operations)의 개념을 이해하고,
다양한 연산(map, filter, sorted, reduce, collect 등)을 활용하여 데이터를 효과적으로 처리할 수 있다.
3. 여러 연산 단계를 연결한 스트림 파이프라인의 특성을 이해하고 활용할 수 있다.
4. 컬렉션이나 배열 데이터를 스트림으로 전환하여 선언적 프로그래밍으로 변환 후 프로세싱 할 수 있다.

Day15 3월 18일
1. Java IO를 활용하여 파일을 읽고 쓸 수 있다.
2. Java NIO (New IO)를 이용하여 버퍼(Buffer)와 채널(Channel)을 활용한 비동기 파일 입출력을 할 수 있다.
3. Java NIO.2 (Files API, Path API)를 사용하여 파일 및 디렉토리를 생성, 복사, 이동, 삭제할 수 있다.
4. Java I0, NIO, NIO.2의 차이점을 이해하고 적절한 상황에서 사용할 수 있다.

Day16 3월 19일====
1. Files.readAIILines(), write()를 이용해 파일 입출력 처리와 텍스트 파일 데이터 읽기/쓰기 기능을 구현한다.
                    -byte 단위: Files.newOutPutStream() Files.newInputStream()
                    -문자열 단위: write() , Files.readAllLines()  - List<String>
                    -객체 단위: ObjectOutStream()+Files.newOutPutStream()+ObjectInputStream()

2. Files.walk(), Files.ist0를 활용해 디렉토리 탐색 및 파일 목록 처리 기능을 수행한다.
static Stream<Path> walk(Path start, FileVisitOption... options)
static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options)
static Path walkFileTree(Path start, FileVisitors? super Path> visitor) ->start 패스를 시작으로 디렉토리 탐색중에 발생되는 이벤트를
FileVisitor 처리 후 start 패스로 리턴함
static Path walkFileTree(Path start, Set <FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor)
3. ByteBuffer, CharBuffer 등 다양한 Buffer 개념과 주요 메서드를 이해하고 직접 데이터 입출력을 구현할수 있다.
(put(), get, flipO, clear )
4. Channel과 Buffer의 구조적 차이와 관계를 이해하고, NIO 기반 입출력 처리 패턴을 활용할 수 있다..
5. Path와 Paths 클래스 활용법을 이해하고, 파일 및 디렉토리 경로를 관리할 수 있다.


Day17 3월 20일=
1. Mysql의 기본 구조와 환경설정 및 기본 명령을 구현하고 활용할 수 있다. = my.ini, MySQL80

2. SELECT 문법을 이해하고 원하는 컬럼 데이터를 조회할 수 있다.
3. WHERE 절을 활용하여 조건에 맞는 데이터를 필터링할 수 있다.
기본명령 Select 문-> 윈도우함수-> 숫자,문자,날짜 함수-> 서브쿼리 -> 조인 -> 테이블 CRUD , 제약조건, VIEW
-> index -> 트리거-> PL/SQL_ 프로시저, 함수}


Day18 3월 21일
1. 집계 함수의 종류를 활용하고 그룹핑을 구현할 수 있다.
2. SELECT 전체 구문을 통해 실행 순서를 학습할 수 있다.
3. 다양한 함수를 통해서 각 데이터를 변환 할수 있다.
4. 테이블의 연관 관계를 이해하고 관계를 식별할 수 있다.

Day19 3월 22일

1. 테이블의 연관 관계를 이해하고 관계를 식별할 수 있다. _ 다중 테이블 ERD , 주종관계 (약한주종관계 , 강한 주종관계)
       1)강한 주종 관계
       -종속(자식 테이블)이 부모테이블의 기본키를 외래키로 참조하지만, (자체적으로 기본키)를 가진다.
       -부모테이블이 없어도 자식 테이블의 의미를 가진다.
       -작성자가 없는 게시판의 게시글

       2) 약한 WEAK 주종관계 = cascade = on delete no action on update no action
            -> 부모테이블에서 delete, update 가 발생해도 자식 테이블에는 아무일도 일어나지 않는다.
       -자식 테이블이 부모테이블 없이는 존재할 수 없다.
       -자식 테이블의 기본 키가 부모 테이블의 기본키 + 자식의 속성으로 구성(복합키)
       -부모 삭제시 자식 삭제 되도록 설계
       -상품 상세 페이지(주문 x, 상세 x)

       3) 예시 사원테이블과 부서 테이블은 어떤 관계일까?
       -강한 주종관계로 설계를 한다면 ? 사원이 부서배치를 받지 않은 상태 = 부서번호가 NULL (사원이 독립적으로 존재)
       -> on delete no action on update no action 으로 강한 주종으로 설계됨(emp - dept)
       -약한 주종관계로 설계를 한다면? 부서가 삭제되면 사원도 삭제된다 _ 무조건 종속



2. SELECT의 /LIKE 문장과 정규패턴의 다른점을 활용해서 원하는 속성을 찾을 수 있다.

3. 집계함수의 옵션을 통해서 조건구문을 간략하게 구성할 수 있다.

4. 문자함수, 날짜 함수, 숫자 함수등을 활용해서 속성을 변형한 값을 리턴받을 수 있다.

Day20 3월 26일
1. 테이블의 레코드 관계를 이해하고 설명 할 수 있다.
- 1:1 관계는 두 테이블의 레코드가 일대일로 연결되는 관계 ( 사용자 테이블과 사용자 상세 정보 테이블, 주민등록증 테이블과 사용자 테이블)
- 1:N 관계는 한 테이블의 레코드가 다른 테이블의 여러 레코드와 연결되는 관계(고객 테이블과 주문 테이블과 주문 테이블, 부서와 사원 테이블)
- N:M 관계는 두 테이블의 레코드가 서로 여러 개의 레코드와 연결되는 관계 (학생 테이블과 강의 테이블, 상품 테이블과 주문 테이블)
2. 문자열 함수를 활용하여 데이터에서 필요한 문자열을 추출, 변환, 가공하여 원하는 형태로 출력할 수 있다.
3. 숫자 함수를 활용하여 계산, 반올림, 절삭 등 다양한 수치 연산을 수행하고, 그 결과를 리턴값으로 활용할 수 있다.
4. 날짜 및 시간 할수를 활용하여 기간 계산. 날짜 추출. 포맷 변경 등의 결과를 도출하고 이름 리턴값으로 활용할 수 있다.


Day21 3월 27일

1. 조인의 개념과 종류를 이해하고, INNER JOIN, OUTER JOIN, CROSS JOIN의 차이를 설명할 수 있다.

2. ON, USING, NATURAL JOIN을 활용하여 두 개 이상의 테이블을 조인하고 원하는 데이터를 추출할 수 있다.
3. 실무에서 필요한 SELF JOIN과 EQUI JOIN을 적용하여 계층 구조 및 조건 기반 데이터 연결을 구현할 수 있다.
계층 구조(상사-부하) 표현하고 싶을 때 + SELF JOIN
조건 정확히 맞춰서 조인하고 싶을 때 > EQUI JOIN

4. 데이터 레코드 기반의 엔티티를 이용하여 집합, 교집합, 차집합등 집합연산을 구현하고 설명할 수 있다.

5. 서브쿼리를 이해하고 설명 할 수 있다.

Day22 3월 28일==
1. 서브쿼리의 개념과 작성 위치(WHERE, SELECT, FROM 절 등)를 이해하고 적용할 수 있다.
2. 단일 행 서브쿼리와 다중 행 서브쿼리의 차이점과 적절한 연산자(IN, ANY, ALL 등)의 사용법을 설명할 수 있다.
3. 서브쿼리를 활용하여 메인 쿼리의 조건을 동적으로 설정하고, 복잡한 조건의 데이터를 조회할 수 있다.
4. 상호 연관 서브쿼리(Correlated Subquery)의 동작 방식을 이해하고, 행마다 조건이 달라지는 상황에 적절히 활용할 수 있다.

Day23 3월 31일
1. 테이블 생성 시 다양한 제약 조건(Primary Key, Unique, Check, Default, Foreign Key)을 선언하고 적용할 수 있다.
2. INSERT, SELECT, UPDATE, DELETE 문을 활용하여 데이터베이스의 기본적인 CRUD 작업을 수행할 수 있다.
3. VIEW을 생성하고 수정하여 복잡한 SELECT 문을 재사용 가능한 가상 테이블 형태로 활용할 수 있다.
4. VIEW에서 WITH CHECK OPTION, SQL SECURITY, ALGORITHM 등의 옵션을 이해하고 적절하게 사용할 수 있다.
5. 제약 조건 및 VIEW 설정이 데이터 무결성과(SHOW CREATE VIEW, IS_UPDATABLE) 보안, 조작에 어떤 영향을 미치는지 설명하고 실습할 수 있다.

Day24 4월 1일
1. VIEW를 생성하고 수정하여 복잡한 SELECT 문을 재사용 가능한 가상 테이블 형태로 활용할 수 있다.
2. VIEW에서 WITH CHECK OPTION, SQL SECURITY, ALGORITHM 등의 옵션을 이해하고 적절하게 사용할 수 있다.
• WITH CHECK OPTION: 뷰를 통해 데이터 변경 시 뷰의 WHERE 조건을 반드시 만족해야만 수정이 허용됨
- SQL SECURITY {DEFINER | INVOKER}: 뷰 실행 시 권한을 누구 기준으로 할 것인지 설정 (뷰 생성자 or 호출자)
- ALGORITHM = {MERGE | TEMPTABLE | UNDEFINEDI: 뷰 내부의 SELECT 쿼리를 처리하는 방식
3. 스토어드 프로시저와 사용자 정의 함수의 차이점과 사용 목적을 이해하고 설명할 수 있다.
- 프로시저(Procedure): 여러 SQL 문을 묶어 저장하고 실행. 주로 데이터 변경, 복잡한 로직 처리, 트랜잭션에 사용됨. CALL proc_name(..)
- 함수(Function): 하나의 값을 반환하며 SELECT 문 안에서도 사용할 수 있음. 주로 계산식, 포맷, 데이터 가공 시 사용. SELECT my_func...)
4. 프로시저와 함수를 생성(Create), 호출(Call), 수정(Alter), 삭제(Drop)하는 문법을 활용할 수 있다.
- 생성: CREATE PROCEDURE, CREATE FUNCTION
- 호출: CALL procedure_name(...), SELECT function_name(..)
- 수정: ALTER PROCEDURE, ALTER FUNCTION
- 삭제: DROP PROCEDURE, DROP FUNCTION
5. 변수 선언 (DECLARE, SET), 조건문(IF ... THEN ... ELSE ... END IF), 반복문(LOOP, WHILE, REPEAT), 커서(Cursor)를 활용하여 복잡한 로직을 구현할 수 있다.

Day25 4월 2일

1. 프로시저(Stored Procedure)의 구조와 사용법을 이해하고, 입력(IN), 출력(OUT) 파라미터를 통해 반복적 작업을 자동화할 수 있다.
2. 사용자 정의 함수(UDF: User Defined Function)를 생성하고 호출하는 방법을 익혀, 쿼리 내에서 재사용 가능한 로직을 구현할 수 있다.
3. 인덱스(Index)의 개념과 종류(Primary, Unique, Composite 등)를 이해하고, 조회 성능 향상을 위해 적절히 설계할 수 있다.
- 기본 키 인덱스 (Primary Key Index) :기본 키로 자주 검색하는 경우 유리
- 고유 키 인덱스 (Unique Key Index) : 고유한 값으로 자주 검색하는 경우 유리
- 일반 인덱스 (Non-unique Index / Secondary Index) : WHERE 절에 자주 사용되는 열에 생성 (충복허용, 널값 허용)
ex) CREATE INDEX idx_email ON users (email);
-복합 인덱스 (Composite Index / Multi-column Index): 함께 자주 검색되는 열들을 묶어 생성, 카디널리티 높은 열을 앞쪽에 배치
- 전문 검색 인덱스 (Full-Text Index) 텍스트 내용 검색 기능이 필요한 경우 활용
4. EXPLAIN 명령어를 활용하여 인덱스가 적용되는 쿼리 실행 계획을 분석하고, 쿼리 최적화를 위한 인덱스 활용 방법을 설명할 수 있다.


Day26 4월 3일 ====
1. 데이터베이스 사용자 및 권한 관리 기능을 이해하고, 계정 생성과 권한 부여/회수 작업을 수행할 수 있다.
- 사용자 생성(CREATE USER), 권한 부여(GRANT), 회수(REVOKE), 역할(ROLE) 등의 개념을 이해하고 적용할 수 있다.
2. 테이블의 파티션(Partition) 기능을 이해하고, RANGE 파티셔닝을 통해 대용량 데이터를 효과적으로 분산 저장할 수 있다.
- PARTITION BY RANGE, VALUES LESS THAN, MAXVALUE 등을 활용하여 특정 기준 컬럼에 따라 데이터 분할이 가능하다.
3. 파티션된 테이블에서 데이터 분포 상태 및 성능 최적화 여부를 정보 스키마와 실행계획을 통해 분석할 수 있다.
- INFORMATION_SCHEMA.PARTITIONS, EXPLAIN, SQL_NO_CACHE 등을 활용하여 파티션 효과를 검토하고 비교할 수 있다.
4. 파티션 테이블의 구조 변경(추가, 삭제, 제거 등) 및 파티션 단위 조회를 통해 관리 능력을 향상시킬 수 있다
- ALTER TABLE... DROP PARTITION, REMOVE PARTITIONING, SELECT FROM PARTITION 등을 활용해 실전 운영 상황을 관리할 수 있다.
5-트리거의 기본 개념 및 문법을 이해하고, 다양한 상황에 맞는 트리거를 생성할 수 있다.
→ CREATE TRIGGER, DROP TRIGGER, SHOW TRIGGERS
, 트리거 내에서 OLD와 NEW 키워드를 사용하여 변경 전후의 데이터에 접근하고, 필요한 로직을 구현할 수 있다

6 트리거 내에서 OLD와 NEW 키워드를 사용하여 변경 전후의 데이터에 접근하고, 필요한 로직을 구현할 수 있다.
    OLD : update, delete -> old.컬럼 명으로 변경, 삭제 되기 전의 해당 컬럼값 참조 -> 변경이력
    NEW : update, insert -> new.컬럼 명으로 새로 삽입되거나 변경된 후의 해당 컬럼값 참조 -> 유효성 검사, 자동 계산, 데이터 변환 등


Day27 4월 4일
1. 데이터 모델링의 개념을 이해하고, 필요성과 목적을 설명할 수 있다.
2. 엔티티(Entity)와 속성(Attribute)의 개념을 이해하고, 예시를 통해 식별할 수 있다.
3. 엔티티 간의 관계(Relationship)를 식별하고, 관계 유형을 표현할 수 있다.
4. 식별자(Primary Key)의 정의와 역할을 이해하고, 올바른 식별자를 설계할 수 있다.

Day28 4월 7알

1. JDBC의 개념과 구조를 이해하고, 데이터베이스 연결을 위한 기본 설정을 수행할 수 있다.
2. JDBC를 활용하여 SQL 쿼리를 실행하고, 결과를 처리하는 프로그램을 작성할 수 있다.
3. Statement 인터페이스의 역할과 특징을 설명하고, executeQuery0, executeUpdate0 메서드를 사용하여 결과를 처리할 수 있다.
4. SQL 삽입 공격(SQL Injection)의 위험성을 인지하고, 이를 방지하기 위해 Preparedstatement 인터페이스를 사용하는 이유와 이점을 설명할 수 있으며, ? 플레이스홀더를 활용하여 파라미터화된 쿼리를 작성하고 실행할 수 있다.

5 4월 8일

1. JDBC의 Callablestatement 인터페이스를 사용하여 입력 파라미터를 전달하고 출력 파라미터 또는 반환 값을 받는 방식으로 프로시저를 호출하는 코드를 구현할 수 있다.
2. ResultSetMetaData 인터페이스를 통해 쿼리 결과셋의 컬럼 정보 (이름, 타입, 크기 등)를 동적으로 획득하고 활용하여 일반화된 데이터 처리 로직을 구현할 수 있다.
3. PreparedStatement의 ParameterMetaData 인터페이스를 통해 쿼리 파라미터의 정보 (타입, 모드 등)를 파악하고 활용할 수 있다.
3. 데이터베이스 연동 로직을 Model, View, Controller로 분리하여 애플리케이션의 구조를 이해하고 설명할 수 있다.
View : 사용자에게 정보를 표시하고 사용자의 입력을 받는 인터페이스 역할 (JSP, Thymeleaf 등 정적, 동적페이지)
Mode: 애플리케이션에서 사용되는 데이터와 비즈니스 로직을 처리하는 부분( Service와 DAO 계층)
Controller: 사용자의 요청을 받고, Model과 View 사이의 흐름을 제어하는 역할 (유효성 검증, 페이지 이동)
4. MVC 로직의 흐름을 설계하고 구현할 수 있다.

Day30 4월 9일
1. DAO, Service 계층을 분리하여 구조화된 DB 연동 코드를 작성할 수 있다.
2. JDBC 트랜잭션을 수동으로 제어하고 예외 발생 시 rollback 처리 코드를 구현할 수 있다.
3. 간단한 엔티티를 통한 등록/수정/삭제 기능을 MVC + JDBC 구조로 구현할 수 있다.
4. PreparedStatement를 활용한 사용자 입력 기반의 검색 기능을 구현할 수 있다.

Day31 4월 10일=======
1. MysQL emp 및 dept 테이블 데이터베이스 연동 및 기본 CRUD (Create, Read, Update, Delete) 작업을 MVC 패턴의 JDBC들 수행할 수 있다.
2. 두 개 이상의 테이블(emp, dept)을 조인하여 필요한 정보를 효과적으로 조회하고, 그 결과를 DTO (EmpDeptDTojava) 객체에 매핑하여 활용할 수 있다.
3. 자바에서 스레드를 생성하는 두 가지 주요 방법(Thread 클래스 상속, Runnable 인터페이스 구현)을 이해하고, 각 방법의 특징과 사용 방법을 설명할 수 있다.
- src : 코드

Day32 4월 11일


1. 멀티스레드의 개념과 필요성을 이해하고, 단일 스레드와의 차이점 및 멀티스레드를 사용하는 주요 이유를 설명할 수 있다.

2. Thread 클래스와 Runnable 인터페이스를 활용한 전통적인 스레드 생성 방식을 이해하고, 스레드의 생명주기(생성_실행-대기-종료)를 설명할 수 있다.

3. 스레드 간 공유 자원 접근 시 발생할 수 있는 문제(경쟁 조건 등)들 이해하고, synchronized, wait/notify, Lock 객체를 활용한 동기화 기법을 구현할 수 있다.

4. JDK 21에서 제공하는 향상된 스레드 기능의 핵심 개념(예: 가상 스레드)을 이해하고, 전통적인 스레드와의 차이점을 설명할 수 있다.

5. 새로운 스레드 API를 활용하여, 1/0 바운드 작업과 CPU 바운드 작업에 적합한 동시성 프로그래밍 모델을 설계하고 구현할 수 있다.

6. JAVAfX를 이용한 GUI 매핑을 구현할 수 있다.




Day33 4월 15일
1. 새로운 스레드 API를 활용하여, I/O 바운드 작업과 CPU 바운드 작업에 적합한 동시성 프로그래밍 모델을 설계하고 구현할 수 있다.
- JDK 21의 Virtual Thread와 전통 ThreadPool을 비교
• 작업 특성에 따른 최적의 스레드 구조를 설계
2. Executors 및 Vitual Thread Executor를 활용하여, 다양한 유형의 작업을 분리 처리하는 병렬 구조를 구현할 수 있다.
- Executors.newFixedThreadPool) vs Executors.newVirtualThreadPerTaskExecutor0
- 동시성 구조 설계 시 고려해야 할 자원 사용/스레드 수/작업 큐 등 분석
- 다중 요청 시뮬레이션 + 성능 비교
3. 실행 결과를 기반으로 Virtual Thread의 장단점을 분석하고, 실전 환경에 적합한 스레드 모델을 선택할 수 있다.
- 둘을 활용해 실시간 모니터링 ( 실행 시간, 스레드 수, 메모리 사용량 등 비교 분석)
4. Java의 Socket과 ServerSocket을 활용하여 기본적인 TCP 동신 구조를 설계하고 구현할 수 있다.

Day34 4월 16일=========
1. Java의 Socket과 ServerSocket을 활용하여 기본적인 TCP 통신 구조를 설계하고 구현할 수 있다.
Socket, ServerSocket, DatagramSocket 등의 클래스 이해, TCP(연결형), UDP(비연결형) 구조 비교 , 클라이언트-서버 간 메시지 송수신 실습
2. 멀티 클라이언트 처리를 위한 스레드 기반의 서버 구조를 설계할 수 있다.
접속당 1스레드 구조 vs 스레드풀 구조, 메시지 브로드캐스트 구현, 동시 접속 처리 시 고려할 예외/자원 관리 등 실습
3. 자바의 InetAddress 및 포트, IP 기반 주소 체계를 이해하고 활용할 수 있다.
InetAddress, getHostName, getHostAddress0 등 주요 AP 사용, 도메인과 IP 주소 매핑, 포트 충돌, 바인딩 오류 등 실습 기반 디버깅
4. 객체 직렬화를 통한 소켓 기반 객체 전송 구조를 구현할 수 있다.
Objectoutputstream / ObjectInputstream 활용 , 사용자 정의 객체 전송 및 수신, 직렬화와 네트워크 지연, 보안 고려사항 등 분석

Day34 4월 16일====
1. Java의 Socket과 ServerSocket을 활용하여 기본적인 TCP 통신 구조를 설계하고 구현할 수 있다.
Socket, ServerSocket, DatagramSocket 등의 클래스 이해, TCP(연결형), UDP(비연결형) 구조 비교, 클라이언트-서버 간 메시지 송수신 실습
2. 멀티 클라이언트 처리를 위한 스레드 기반의 서버 구조를 설계할 수 있다.
접속당 1스레드 구조 vs 스레드풀 구조, 메시지 브로드캐스트 구현, 동시 접속 처리 시 고려할 예외/자원 관리 등 실습
3. 자바의 InetAddress 및 포트, IP 기반 주소 체계를 이해하고 활용할 수 있다.
InetAddress, getHostName, getHostAddress0 등 주요 API 사용, 도메인과 IP 주소 매핑, 포트 충돌, 바인딩 오류 등 실습 기반 디버깅
4. 객체 직렬화를 통한 소켓 기반 객체 전송 구조를 구현할 수 있다.
ObjectoutputStream / ObjectInputStream 활용 , 사용자 정의 객체 전송 및 수신, 직렬화와 네트워크 지연, 보안 고려사항 등 분석

Day35 4월 17일  =================
1. 채팅 서버/클라이언트의 기능 확장 및 구조 개선을 구현할 수 있다.
2. Virtual Thread를 활용하여 경량 스레드 기반 네트워크 구조를 설계할 수 있다.
3. Selector 및 NIO 기반의 논블로킹 네트워크 구조를 이해하고 비교할 수 있다.
4. Wireshark 를 활용해서 네트워크를 상태 정보를 리턴 받을 수 있다



Day36 4월 18일 =======
1. Virtual Thread 기반의 고성능 네트워크 서버 구조들 설계하고, 동시성 모델을 기존 방식과 비교 분석할 수 있다.
ServerSocketaccept() 이후 요청마다 VirtualThread로 처리 Echoserver, TimeServer, FileTransferServer에 가상 스레드 적용
2. 네트워크 트래픽 및 동신 흐름을 Wireshark로 실시간 분석하고, 동신 프로토콜 설계와 디버깅에 활용할 수 있다.
tcp port == 9500 필터로 Java 서버/클라이언트 모니터링, 메시지 포맷 (예: SEND:홍길동:안녕하세요) 구조 확인 , 패킷 전송 시점, 재전송 여부, RTT 확인
3. Executor 및 VirtualThread를 사용하여 작업 처리 병화를 구현할 수 있다
Thread.startVirtualThread() 또는 Executors.newirtualThreadPerTaskExecutor()
ExecutorService 활용 여러 잡업의 스레드 풀. submit(), shutdown() 으로 종료

=======================================[FE ]================================================================
1일차: HTML/CSS 기본 구조와 시맨틱 태그 이해
2일차: Flex/Grid 레이아웃을 활용한 반응형 페이지 제작
3일차: JavaScript와 jQuery 이벤트 처리 기초
4일차: Ajax와 REST API 개념 및 외부 데이터 연동
5일차: Node.js + Express + MySQL을 활용한 백엔드 구축
6일차: React JSX 및 컴포넌트 구조 학습
7일차: useState, 이벤트 처리, 폼 제어 실습
8일차: useEffect, Axios를 활용한 비동기 데이터 연동
9일차: React와 백엔드를 연동한 CRUD 게시판 완성
10일차~ 12일차(3일) : 팀 프로젝트 발표 및 GitHub 배포
=======================================[FE ]================================================================

Day37 4월 21일
1. HTML의 시맨틱 태그를 활용하여 의미 있는 페이지 구조를 설계할 수 있다.

2. <h1>~<h6>, <p>, <ul>, <ol>, <a> 등을 활용하여 텍스트와 리스트, 링크를 구성할 수 있다.

3. <img>, 〈table>, <form> 등 기본 태그를 활용하여 실생활 페이지 구성을 시작할 수 있다.

4. CSS 기본 선택자와 속성을 활용하여 텍스트, 배경, 레이아웃을 꾸밀 수 있다.










- etc : 문제
- notice : 정리

- com.test			<< 클래스 만들기, 메소드 호출해 보기 >>

	메소드 선언 및 호출
	- 접근제한자 static 리턴타입 userName(){}
	** public static void sleep(long millis) throws InterruptedException
	*메소드 뒤에 선언되는 throws 키워드는 프로그램이 실행되면서 발생되는 상황을 클래스로 생성해서
	 JVM이 알려주는 예외처리 위임

	- 리턴데이터타입 [ 7가지 자료형과 참조자료형 return 키워드 / void ]
	public static void prn() {
		System.out.println("안녕하세요");
	}
	- 호출 클래스명.메소드

	- public static void UserName(매개인자*){}

	- public static [datatype] UserName(매개인자*){
		return [datatype_value]
	}


- com.sec01			<< 기본 자료형, 값 >>
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
	DataType.java - boolean 타입 확인
- com.sec02.exam
Wrapper class : 기본 데이터 타입(primitive type)을 객체로 다루기 위해 제공되는 클래스
Boxing
: 기본형 * 래퍼 객체 변환 (Integer.valueOf(10))
 Unboxing
: 래퍼 객체 + 기본형 변환 (obj.intValue())
Auto-Boxing
: Integer obj = 10; (자동 변환)
Auto-Unboxing : int num = obj; (자동 변환)

 - BitOperator.java

진리지표확인, 각 래퍼클래스의 변환메소드확인 , String.format(), 비트 자리수표현
 정수, 실수 각각 리턴변환 메소드 API확인
Nan 처리하는 메소드 확인 -> 변환값 확인! !!

-com.sec03 클래스 선언, 생성, 멤버 호출
class 	- userDataType
		- 선언된 멤버변수는 은닉(private)하고 오픈된 메소드(public)를 통해
		  값 전달 및 변경(setter)하는 리턴하는 구조(getter)를 가진다
		- class 멤버 = 필드 + 메소드

		[선언방법]
			접근 제한 [abstract] class userName{
			    필드 + 메소드
			}

ex) 정수 두 수를 관리하는 Test 클래스를 만들어 보자.
class Test{
    private int b;
    private int b;

    //setter -void
    public void setA(int a)
    {
    this.a = a;
    }
    public void setB(int b)
    {
    this.b = b;
    }
    //getter
    public int getA()
    {
    return a;
    }
    public int getB()
    {
        return b;
    }

    걍 게터세터 만들거나 롬복 쓰자 제발
}


=======================================================================================
오버로딩 (Overloading) : 하나의 클래스 내에서 같은 이름의 메서드를 { 매개변수 개수, 타입을 다르게} 여러 개 정의하는 것
목적 : 같은 기능을 다양한 입력값에 적용
오버라이딩 (Overriding) : 상속시 부모 클래스의 메서드를 자식 클래스에서 {메서드명, 매개변수, 반환 타입을 동일} 재정의하는 것
목적 : 부모 클래스의 동작을 자식 클래스에서 변경해서 기능에 사용
=======================================================================================
- 생성자
?
- 클래스 이름과 동일하되 반환형은 없다.
- 오버로드 할 수 있다.
- 생성자는 객체를 생성할 때 단 한번만 호출된다.
- 메서드 처럼 명시호출 할 수 없다
- 생성자는 상속 되지 않으며 객체를 생성할 때 단 한번 호출되어 메모리 할당된다.
- 생성자를 명시하지 않으면 기본 생성자가 호출되고 명시하면 명시된 생성자가 호출된다.
- 생성자는 멤버변수 초기화를 목적으로 한다.
=======================================================================================

다이어그램 설치
https://download.eclipse.org/modeling/mdt/papyrus/updates/releases/2024-06
com. Sec09 예외처리 -> 어떤 경우에 의해 실행시 발생하는 프로그램 중단을 강제종료하지 않도록 처리하는 것
1) try ~ Catch : 예외를 직접 처리하는 구문

2) finally: 예외발생 유무와 관계 없이 실행됨

3) throws : 메소드 뒤에 선언되며 호출하는 곳으로 예외처리 위임

4) throw: 예외 클래스를 명시 실행

5) try - with - resources: finally없이 자동 리소스 해제


==============================================================================
2. Stream API  데이터 집합을 효과적으로 처리할 수 있는 API로 필터링, 그룹핑등 가능하다.

 1) Stream 연산순서
      (1)생성 :Collection.stream(), Stream.of(), Arrays.stream()
      (2)중간 연산 (Intermediate Operation):
         filter(), map(), sorted(), distinct(), limit(), flatMap() 등
         중간 연산은 스트림을 변환하는 작업을 수행하며, 최종 연산이 호출될 때 실행된다
      (3)최종 연산 (Terminal Operation)
        forEach(), collect(), reduce(), count(), sum(), min(), max() 등
         최종 연산이 수행되면 스트림이 소비되며, 이후에는 다시 사용할 수 없다

 2)Stream 주요 연산
  map()    : 요소 변환 -> Stream<R> map(Function<T,R> mapper) -> R apply(T t)
            형변환, 문자열 소대문자 변환, 객체
 filter()     :조건에 맞는 요소만 선택
 sorted()     : 정렬 수행
 reduce()     : 누적 연산 수행
 collect(): 리스트, 맵 등으로 변환
 peek(): 변환 작업을 할 때 테스트 용으로 사용한다.

 3.병렬 처리parallelStream()을 활용하면 데이터 병렬 처리가 가능하다


======================================================================================
com. sec13.myio
1. java.io (기본 I/O)
스트림 기반: 데이터를 순차적인 스트림으로 처리.
블로킹 I/O: 읽기/쓰기 작업이 완료될 때까지 스레드가 대기함.
파일,, 네트워크, 메모리 등 다양한 입출력 지원: 기본적인 파일 입출력, 네트워크 통신, 메모리 스트림 등을 처리. I 단순하고 사용하기 쉬움: 기본적인 입출력 작업을 처리하는 데 적합.
2. java.nio (New I/0)
버퍼 기반: 데이터를 버퍼에 저장하고 처리한다.
논블로킹 I/O: 읽기/쓰기 작업이 완료되지 않아도 스레드가 다른 작업을 수행한다.
채널과 셀렉터: 채널을 통해 입출력을 수행하고, 셀렉터를 사용하여 여러 채널을 효율적으로 관리 고성능 I/O: 대규모 네트워크 애플리케이션 등 고성능 I/O가 필요한 경우에 적합하다.
3. java.nio.file (NIO.2)
파일 시스템 API: 파일 및 디렉터리 작업을 위한 강력하고 유연한 API를 제공한다.
Path 인터페이스: 파일 경로를 추상화하여 플랫폼 독립적인 코드를 작성할 수 있도록 한다.
Files 클래스: 파일 복사, 이동, 삭제, 속성 관리 등 다양한 파일 시스템 작업을 지원한다.
파일 시스템 작업에 특화: 파일 시스템 관련 작업을 보다 쉽고 효율적으로 처리한다.



static Stream<Path> walk(Path start, FileVisitOption... options) -> start 패스를 시작으로 디렉토리 탐색결과를 Stream<Path>로 리턴 static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options)
static Path walkFileTree(Path start, FileVisitors? super Path> visitor)-> start 패스를 시작으로 디렉토리 탐색중에 발생되는 이벤트를 FileVisitor처리 후 start 패스로 리턴
static Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor)
===> 1) 위 오버로드 메소드를 통해 디렉토리 순회결과 및 이벤트 확인 Filevisitor
2) FileVisitor 인터페이스를 사용한 커스텀 FileVisitor를 생성하는 방법
3) SimpleFileVisitor 클래스를 사용한 커스텀 이벤트 선택적으로 생성하는 방법
4) BasicFileAttributes 파일의 기본 속성값 활용하는 방법
3. ByteBuffer, CharBuffer 등 다양한 Buffer 개념과 주요 메서드를 이해하고 직접 데이터 입출력을 구현할수 있다.
allocate : 초기 메모리 할당
putO :데이터 저장, get0 데이터 리턴,
flipo 읽기전환(position O, limit는 마지막 데이터로 설정), clear0 버퍼 재사용준비, (position 0, limit는 초기화 )
I
4. Channel과 Buffer의 구조적 차이와 관계를 이해하고, NIO 기반 입출력 처리 패턴을 활용할 수 있다. .
5. Path와 Paths 클래스 활용법을 이해하고, 파일 및 디렉토리 경로를 관리할 수 있다.


MyPersonApp
├── lib
│   └── mysql-connector-j-9.1.0.jar
└── src
    └── com
        └── person
            ├── controller
            │   └── PersonController.java  -- [7]
            ├── dao
            │   ├── PersonDao.java (I)     -- [4]
            │   └── PersonDaoImpl.java (C)
            ├── model
            │   └── Person.java          -- [3]
            ├── service
            │   ├── PersonService.java (I) -- [5]
            │   └── PersonServiceImpl.java (C)
            ├── view
            │   └── PersonConsolView.java  -- [6] 전체 출력 코드 / 알림코드
            └── common
                └── JDBCTemplate.java      -- [2]
    └── db.properties                  -- [1]