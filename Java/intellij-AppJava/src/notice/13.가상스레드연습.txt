 1. 목표 정리 
[목표1] Thread.Builder가 어떤 타입인지 구분하자

Thread.ofVirtual(), Thread.ofPlatform() 같은 빌더 패턴으로 스레드를 만들 수 있게 해줘.

여기서 나오는 게 바로 Thread.Builder 인터페이스야.

[목표2] 해당 타입에 맞는 스레드를 생성해서 실행 결과를 확인하자. 

1. Runnable task = () -> System.out.println("Hello Virtual Thread!");

   Thread t = Thread.ofVirtual().name("v-thread", 0).start(task);


2. Runnable task = () -> System.out.println("Hello Platform Thread!");

   Thread t = Thread.ofPlatform().name("p-thread", 0).start(task);





2. 용어 빈칸 채우기 : 아래 빈칸을 채워보세요 (단어: Virtual, Platform, sealed, join, start)
Thread.Builder는 ________ interface로 선언되어 있다.

sealed

🔍 해설:
Thread.Builder는 Java 21에서 도입된
sealed interface 로 선언되어 있어.

public sealed interface Thread.Builder
    permits Thread.Builder.OfPlatform, Thread.Builder.OfVirtual
sealed 키워드는 허용된 서브타입만 구현 가능하게 만드는 제약 선언이야.

여기서는 OfPlatform, OfVirtual만 Thread.Builder를 구현할 수 있음.

----------------------------------------------------------------------------
Thread.ofVirtual()은 내부적으로 ________ 스레드를 생성한다.

virtual

Thread.ofVirtual()은 Java 21에서 새롭게 추가된 메서드로
JVM에서 직접 관리하는 가상 스레드(Virtual Thread) 를 생성하는 빌더를 반환해.

이 가상 스레드는 기존 플랫폼(운영체제) 스레드보다 훨씬 가볍고,
대량의 동시 처리를 효율적으로 할 수 있어.

----------------------------------------------------------------------------

실제 스레드를 실행할 때는 builder._______(Runnable)을 호출한다.

start

Thread.Builder를 사용해 스레드를 만들고 실행할 때는
start(Runnable) 메서드를 호출해서 바로 실행하는 스레드를 생성함.
start()는 스레드를 만들고 곧바로 실행한다.

만약 실행하지 않고 객체만 만들고 싶다면 unstarted(Runnable)을 쓰면 됨.


----------------------------------------------------------------------------
작업이 끝날 때까지 기다리기 위해 thread._______()을 사용한다.

join

join() 메서드는 해당 스레드가 종료될 때까지 현재 스레드를 대기시킴
----------------------------------------------------------------------------
일반적인 OS 기반 스레드는 Thread.Builder.Of________이다.

Platform
----------------------------------------------------------------------------
3. 예측 퀴즈 (O/X)
Thread.Builder는 직접 구현해서 사용하는 것이 권장된다.	(O/X)

x
----------------------------------------------------------------------------
VirtualThread는 블로킹 메서드도 안전하게 사용할 수 있다.	(O/X)
o
----------------------------------------------------------------------------
switch 문에서 Builder 타입을 구분하려면 preview 기능이 필요하다.(O/X)
x
----------------------------------------------------------------------------
✅ preview 기능이란?
정식 기능으로 채택되기 전,
시험적으로(Java에 탑재된 상태에서) 사용해볼 수 있도록 제공되는 기능

🔍 미리 써보고 피드백 받는 “베타 기능” 같은 것
→ 언어(Syntax)나 JVM에 직접 영향 주는 기능일 때 제공됨
----------------------------------------------------------------------------
Platform Thread는 Virtual Thread보다 경량이다.	(O/X)
x
----------------------------------------------------------------------------
sealed interface는 switch-case의 완전성을 보장한다.(O/X)

O
sealed interface는 구현 가능한 서브타입이 명시적으로 제한됨

덕분에 switch문에서 컴파일 타임에 모든 case를 검사할 수 있음
----------------------------------------------------------------------------

 4. 코드 추론 실습 (빈칸 채우기)  g_exam.java  만들기
Thread.Builder builder = Thread.of_______().name("my-", 0);
(1) Virtual
switch (builder) {
    case Thread.Builder.OfVirtual v -> {
        Thread thread = v.____(() -> {
(2)unstarted
            System.out.println("실행 중: " + Thread.currentThread());
            Thread._________(500);
(3)sleep
        });
        thread._______();
(4)start
    }
}
5. 실행 결과
실행 중 (Virtual): ____________
실행 시간: _____ ms

6. 한 줄 정리
sealed interface와 switch 패턴 매칭을 함께 사용하면 ___________하게 타입 분기를 처리할 수 있다.

안전하고 명확

7. 야옹이 🐱 vs 멍멍이 🐶 사과 따기 경쟁" (동기화 실습) 
public class AppleTreeCompetition {
    private static int apples = 100;
    private static int catCount = 0;
    private static int dogCount = 0;

    public static void main(String[] args) throws InterruptedException {
        Runnable catTask = () -> {
            while (true) {
                if (!pickApple("🐱 야옹이")) break;
            }
        };

        Runnable dogTask = () -> {
            while (true) {
                if (!pickApple("🐶 멍멍이")) break;
            }
        };

        Thread t1 = new Thread((1)catTask, "🐱 야옹이");   // 🐱 야옹이 스레드 시작
        Thread t2 = new Thread((2)dogTask, "🐶 멍멍이");   // 🐶 멍멍이 스레드 시작

        t1.start();
        t2.start();

        t1.(3)___________();  // 스레드 종료 대기
        t2.(4)___________();
        3,4 join?

        System.out.println("🍎 수확 종료!");
        System.out.println("🐱 야옹이: " + (5)________ + "개");
        System.out.println("🐶 멍멍이: " + (6)________ + "개");
        5 catCount
        6 dogCount
    }

    private static synchronized boolean pickApple(String who) {
        if (apples <= 0) return false;

        apples--;
        if (who.contains("야옹이")) catCount++;
        else dogCount++;

        System.out.println(who + " 가 사과를 땄습니다! 🍎 남은 사과: " + apples);
        try {
            Thread.sleep((int)(Math.random() * 50));
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return true;
    }
}

